
//+------------------------------------------------------------------+
//|             DIAMOND PRO v20 (Fusion v19 + PRO corrigé)           |
//|     Copilot pour amirbs14 - Juin 2025 - Prêt à compiler MQL5     |
//+------------------------------------------------------------------+
#property copyright "amirbs14 / Copilot"
#property version   "20.0"
#property strict

#include <Trade\Trade.mqh>
#include <ChartObjects\ChartObjectsTxtControls.mqh>
#ifndef OBJPROP_HEIGHT
#define OBJPROP_HEIGHT 103  // Valeur officielle de la doc MQL5
#endif

CTrade trade;

// Si besoin pour compatibilité (OBJPROP_HEIGHT est normalement défini par MQL5)
// #define OBJPROP_HEIGHT 102

//-------------------- Inputs (externes) ----------------------------
input double      Lots                = 0.01;
input double      RiskPercent         = 2.0;
input int         StopLoss            = 350;
input int         TakeProfit          = 350;
input int         Slippage            = 5;
input int         MagicNumber         = 20200519;
input bool        UseTrailingStop     = true;
input int         TrailingStop        = 100;
input int         TrailingStep        = 25;
input int         PartialClose1       = 100;
input int         PartialClose2       = 200;
input double      PartialLot1         = 0.5;
input double      PartialLot2         = 0.25;
input bool        EnableFullClose     = true;
input bool        SoundOn             = true;
input string      GoldSymbol          = "XAUUSD";
input int         DashboardPosX       = 30;
input int         DashboardPosY       = 30;
input int         DashboardWidth      = 410;
input int         DashboardHeight     = 220;

//-------------------- Structures ----------------------------

struct StrategyStats
  {
   string Name;
   bool   Enabled;
   int    TotalTrades;
   int    Wins;
   int    Losses;
   double Profit;
   double WinRate;
   color  StatusColor;
  };

struct DailyStats
  {
   datetime Day;
   double   Profit;
   int      Trades;
   double   MaxDrawdown;
  };

//-------------------- Global Variables ----------------------------

int     strategies_total    = 0;
StrategyStats strategies[]; // tableau dynamique
DailyStats    day_stats[];  // tableau dynamique
bool    dashboard_needs_update = false;
int     dashboard_handle   = -1;
string  symbol_main           = "";
bool    is_gold               = false;
ulong   last_buy_ticket       = 0;
ulong   last_sell_ticket      = 0;
bool    full_close_triggered  = false;
bool    allow_sound           = true;
string  last_error            = "";

int     handle_ma_fast        = INVALID_HANDLE;
int     handle_ma_slow        = INVALID_HANDLE;
int     handle_atr            = INVALID_HANDLE;
int     handle_rsi            = INVALID_HANDLE;
int     handle_macd           = INVALID_HANDLE;
int     handle_bbands         = INVALID_HANDLE;

double  buffer_ma_fast[];
double  buffer_ma_slow[];
double  buffer_atr[];
double  buffer_rsi[];
double  buffer_macd_main[];
double  buffer_macd_signal[];
double  buffer_bbands_upper[];
double  buffer_bbands_middle[];
double  buffer_bbands_lower[];

double  buy_signal            = 0.0;
double  sell_signal           = 0.0;
double  calc_lot              = 0.01;

//-------------------- Prototypes fonctions ----------------------------
void     InitGlobalVars();
void     CheckGoldSymbol();
void     InitializeIndicators();
void     UpdateIndicators();
double   CalcDynamicLot(double risk);
void     ExecuteStrategies();
void     UpdateDashboard();
void     DeleteDashboard();
void     DrawDashboardHeader();
void     DrawDashboardStats();
void     DrawDashboardDaily();
void     DrawDashboardButton();
int      CountOpenPositions(ENUM_POSITION_TYPE posType);
void     FullCloseAll();
void     PlaySoundCustom(string filename);
void     Strategy_Main();
void     Strategy_Breakout();
void     Strategy_RSI();
void     Strategy_MACD();
void     Strategy_BBands();
void     TrailingStopManager();
void     PartialCloseManager();
void     UpdateDailyStatsAfterTrade(double profit);
void     ResetAll();
datetime DateOfDay(datetime t);
void     OnTradeTransaction(const MqlTradeTransaction &trans, const MqlTradeRequest &request, const MqlTradeResult &result);
void     strategies_total_init();
//--------------------------------------------------------------------
//                        Fonctions d'initialisation
//--------------------------------------------------------------------
void InitGlobalVars()
  {
   strategies_total = 0;
   ArrayResize(strategies,10);
   ArrayResize(day_stats,50);
   dashboard_needs_update = true;
   dashboard_handle = -1;
   last_buy_ticket = 0;
   last_sell_ticket = 0;
   full_close_triggered = false;
   allow_sound = SoundOn;
   last_error = "";
   symbol_main = _Symbol;
   is_gold = false;
   calc_lot = Lots;
  }

void CheckGoldSymbol()
  {
   string name = _Symbol;
   StringToUpper(name); // modifie la string en place (pas d'assignation)
   if(StringFind(name,"XAU")>=0 || StringFind(name,"GOLD")>=0)
     {
      is_gold = true;
      symbol_main = _Symbol;
     }
   else if(GoldSymbol!="" && SymbolInfoInteger(GoldSymbol,SYMBOL_SELECT))
     {
      is_gold = true;
      symbol_main = GoldSymbol;
     }
   else
     {
      is_gold = false;
      symbol_main = _Symbol;
     }
  }

void InitializeIndicators()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   // MA Fast
   handle_ma_fast = iMA(symbol_main, PERIOD_CURRENT, 10, 0, MODE_SMA, PRICE_CLOSE);
   ArrayResize(buffer_ma_fast,bars);
   // MA Slow
   handle_ma_slow = iMA(symbol_main, PERIOD_CURRENT, 20, 0, MODE_SMA, PRICE_CLOSE);
   ArrayResize(buffer_ma_slow,bars);
   // ATR
   handle_atr = iATR(symbol_main, PERIOD_CURRENT, 14);
   ArrayResize(buffer_atr,bars);
   // RSI
   handle_rsi = iRSI(symbol_main, PERIOD_CURRENT, 14, PRICE_CLOSE);
   ArrayResize(buffer_rsi,bars);
   // MACD
   handle_macd = iMACD(symbol_main, PERIOD_CURRENT, 12, 26, 9, PRICE_CLOSE);
   ArrayResize(buffer_macd_main,bars);
   ArrayResize(buffer_macd_signal,bars);
   // BBands
   handle_bbands = iBands(symbol_main, PERIOD_CURRENT, 20, 2, 0, PRICE_CLOSE);
   ArrayResize(buffer_bbands_upper,bars);
   ArrayResize(buffer_bbands_middle,bars);
   ArrayResize(buffer_bbands_lower,bars);
  }

void UpdateIndicators()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(handle_ma_fast!=INVALID_HANDLE)
      CopyBuffer(handle_ma_fast,0,0,bars,buffer_ma_fast);
   if(handle_ma_slow!=INVALID_HANDLE)
      CopyBuffer(handle_ma_slow,0,0,bars,buffer_ma_slow);
   if(handle_atr!=INVALID_HANDLE)
      CopyBuffer(handle_atr,0,0,bars,buffer_atr);
   if(handle_rsi!=INVALID_HANDLE)
      CopyBuffer(handle_rsi,0,0,bars,buffer_rsi);
   if(handle_macd!=INVALID_HANDLE)
     {
      CopyBuffer(handle_macd,0,0,bars,buffer_macd_main);
      CopyBuffer(handle_macd,1,0,bars,buffer_macd_signal);
     }
   if(handle_bbands!=INVALID_HANDLE)
     {
      CopyBuffer(handle_bbands,0,0,bars,buffer_bbands_upper);
      CopyBuffer(handle_bbands,1,0,bars,buffer_bbands_middle);
      CopyBuffer(handle_bbands,2,0,bars,buffer_bbands_lower);
     }
  }

double CalcDynamicLot(double risk)
  {
   double acc_equity = AccountInfoDouble(ACCOUNT_EQUITY);
   double sl_pips = (StopLoss>0 ? StopLoss : 200);
   double tick_value = SymbolInfoDouble(symbol_main, SYMBOL_TRADE_TICK_VALUE);
   double tick_size  = SymbolInfoDouble(symbol_main, SYMBOL_TRADE_TICK_SIZE);
   double lot_step   = SymbolInfoDouble(symbol_main, SYMBOL_VOLUME_STEP);
   double min_lot    = SymbolInfoDouble(symbol_main, SYMBOL_VOLUME_MIN);
   double max_lot    = SymbolInfoDouble(symbol_main, SYMBOL_VOLUME_MAX);
   double risk_money = acc_equity * risk/100.0;
   double lot = 0.01;
   double pip_value = tick_value / tick_size;
   if(handle_atr!=INVALID_HANDLE && ArraySize(buffer_atr)>0)
     sl_pips = buffer_atr[0]*2;
   lot = NormalizeDouble(risk_money/(sl_pips*pip_value),2);
   if(lot < min_lot) lot = min_lot;
   if(lot > max_lot) lot = max_lot;
   lot = MathFloor(lot/lot_step)*lot_step;
   return(lot);
  }

//--------------------------------------------------------------------
//                Partie 2 : Stratégies et gestion des signaux
//--------------------------------------------------------------------
void ExecuteStrategies()
  {
   UpdateIndicators();
   for(int i=0;i<strategies_total;i++)
     {
      if(!strategies[i].Enabled) continue;
      if(strategies[i].Name=="SMA Crossover") Strategy_Main();
      else if(strategies[i].Name=="Breakout") Strategy_Breakout();
      else if(strategies[i].Name=="RSI") Strategy_RSI();
      else if(strategies[i].Name=="MACD") Strategy_MACD();
      else if(strategies[i].Name=="BBands") Strategy_BBands();
     }
  }

void Strategy_Main()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(bars<21) return;
   if(buffer_ma_fast[0]>buffer_ma_slow[0] && buffer_ma_fast[1]<=buffer_ma_slow[1])
     { buy_signal = 1; sell_signal = 0; }
   else if(buffer_ma_fast[0]<buffer_ma_slow[0] && buffer_ma_fast[1]>=buffer_ma_slow[1])
     { buy_signal = 0; sell_signal = 1; }
   else { buy_signal = 0; sell_signal = 0; }
   double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
   if(buy_signal>0 && CountOpenPositions(POSITION_TYPE_BUY)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Buy(calc_lot,symbol_main,ask,StopLoss,TakeProfit,"SMA Crossover BUY");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
   if(sell_signal>0 && CountOpenPositions(POSITION_TYPE_SELL)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Sell(calc_lot,symbol_main,bid,StopLoss,TakeProfit,"SMA Crossover SELL");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
  }

void Strategy_Breakout()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(bars<21) return;
   double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
   double close = 0;
   MqlRates rates[];
   if(CopyRates(symbol_main,PERIOD_CURRENT,0,2,rates)>0)
      close = rates[0].close;
   if(buffer_bbands_upper[0]>0 && close>buffer_bbands_upper[0])
     {
      if(CountOpenPositions(POSITION_TYPE_BUY)==0)
        {
         calc_lot = CalcDynamicLot(RiskPercent);
         trade.Buy(calc_lot,symbol_main,ask,StopLoss,TakeProfit,"Breakout BUY");
         if(SoundOn) PlaySoundCustom("ok.wav");
        }
     }
   if(buffer_bbands_lower[0]>0 && close<buffer_bbands_lower[0])
     {
      if(CountOpenPositions(POSITION_TYPE_SELL)==0)
        {
         calc_lot = CalcDynamicLot(RiskPercent);
         trade.Sell(calc_lot,symbol_main,bid,StopLoss,TakeProfit,"Breakout SELL");
         if(SoundOn) PlaySoundCustom("ok.wav");
        }
     }
  }

void Strategy_RSI()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(bars<15) return;
   double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
   double rsi = buffer_rsi[0];
   if(rsi<30 && CountOpenPositions(POSITION_TYPE_BUY)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Buy(calc_lot,symbol_main,ask,StopLoss,TakeProfit,"RSI BUY");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
   if(rsi>70 && CountOpenPositions(POSITION_TYPE_SELL)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Sell(calc_lot,symbol_main,bid,StopLoss,TakeProfit,"RSI SELL");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
  }

void Strategy_MACD()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(bars<35) return;
   double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
   double macd_main = buffer_macd_main[0];
   double macd_signal = buffer_macd_signal[0];
   if(macd_main>macd_signal && buffer_macd_main[1]<=buffer_macd_signal[1])
     {
      if(CountOpenPositions(POSITION_TYPE_BUY)==0)
        {
         calc_lot = CalcDynamicLot(RiskPercent);
         trade.Buy(calc_lot,symbol_main,ask,StopLoss,TakeProfit,"MACD BUY");
         if(SoundOn) PlaySoundCustom("ok.wav");
        }
     }
   if(macd_main<macd_signal && buffer_macd_main[1]>=buffer_macd_signal[1])
     {
      if(CountOpenPositions(POSITION_TYPE_SELL)==0)
        {
         calc_lot = CalcDynamicLot(RiskPercent);
         trade.Sell(calc_lot,symbol_main,bid,StopLoss,TakeProfit,"MACD SELL");
         if(SoundOn) PlaySoundCustom("ok.wav");
        }
     }
  }

void Strategy_BBands()
  {
   int bars = Bars(symbol_main,PERIOD_CURRENT);
   if(bars<21) return;
   double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
   double close = 0;
   MqlRates rates[];
   if(CopyRates(symbol_main,PERIOD_CURRENT,0,2,rates)>0)
      close = rates[0].close;
   double upper = buffer_bbands_upper[0];
   double lower = buffer_bbands_lower[0];
   if(close<lower && CountOpenPositions(POSITION_TYPE_BUY)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Buy(calc_lot,symbol_main,ask,StopLoss,TakeProfit,"BBands BUY");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
   if(close>upper && CountOpenPositions(POSITION_TYPE_SELL)==0)
     {
      calc_lot = CalcDynamicLot(RiskPercent);
      trade.Sell(calc_lot,symbol_main,bid,StopLoss,TakeProfit,"BBands SELL");
      if(SoundOn) PlaySoundCustom("ok.wav");
     }
  }

//------------------------------ GESTION DES POSITIONS ----------------------------
int CountOpenPositions(ENUM_POSITION_TYPE posType)
  {
   int total=0;
   for(int i=0; i<PositionsTotal(); i++)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionGetString(POSITION_SYMBOL)==symbol_main && PositionGetInteger(POSITION_TYPE)==posType)
         total++;
     }
   return total;
  }

//------------------------------ PARTIAL CLOSE MANAGER ----------------------------
void PartialCloseManager()
  {
   for(int i=0; i<PositionsTotal(); i++)
     {
      if(PositionGetString(POSITION_SYMBOL)!=symbol_main) continue;
      double profit = PositionGetDouble(POSITION_PROFIT);
      double volume = PositionGetDouble(POSITION_VOLUME);
      ulong ticket  = PositionGetTicket(i);
      if(profit>=PartialClose1 && volume>PartialLot1*Lots)
        {
         trade.PositionClosePartial(ticket,PartialLot1*Lots);
         if(SoundOn) PlaySoundCustom("partial1.wav");
        }
      if(profit>=PartialClose2 && volume>PartialLot2*Lots)
        {
         trade.PositionClosePartial(ticket,PartialLot2*Lots);
         if(SoundOn) PlaySoundCustom("partial2.wav");
        }
     }
  }

//------------------------------ TRAILING STOP MANAGER ----------------------------
void TrailingStopManager()
  {
   if(!UseTrailingStop) return;
   for(int i=0; i<PositionsTotal(); i++)
     {
      if(PositionGetString(POSITION_SYMBOL)!=symbol_main) continue;
      ulong ticket = PositionGetTicket(i);
      double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
      double stop_loss = PositionGetDouble(POSITION_SL);
      double volume = PositionGetDouble(POSITION_VOLUME);
      int type = (int)PositionGetInteger(POSITION_TYPE);
      double new_sl;
      double bid = SymbolInfoDouble(symbol_main,SYMBOL_BID);
      double ask = SymbolInfoDouble(symbol_main,SYMBOL_ASK);
      if(type==POSITION_TYPE_BUY)
        {
         new_sl = bid - TrailingStop * _Point;
         if(new_sl>stop_loss+TrailingStep*_Point)
            trade.PositionModify(ticket,NormalizeDouble(new_sl,_Digits),PositionGetDouble(POSITION_TP));
        }
      else if(type==POSITION_TYPE_SELL)
        {
         new_sl = ask + TrailingStop * _Point;
         if(new_sl<stop_loss-TrailingStep*_Point || stop_loss==0)
            trade.PositionModify(ticket,NormalizeDouble(new_sl,_Digits),PositionGetDouble(POSITION_TP));
        }
     }
  }

//------------------------------ FULL CLOSE MANAGER ----------------------------
void FullCloseAll()
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetString(POSITION_SYMBOL)==symbol_main)
        {
         ulong ticket = PositionGetTicket(i);
         trade.PositionClose(ticket);
        }
     }
   if(SoundOn) PlaySoundCustom("fullclose.wav");
  }

//------------------------------ FONCTION SOUND ----------------------------
void PlaySoundCustom(string filename)
  {
   // Son désactivé
  }


//--------------------------------------------------------------------
//                Partie 3 : Daily stats, gestion des events, système
//--------------------------------------------------------------------
void UpdateDailyStatsAfterTrade(double profit)
  {
   datetime today = DateOfDay(TimeCurrent());
   int idx = -1;
   for(int i=0; i<ArraySize(day_stats); i++)
     {
      if(day_stats[i].Day == today)
        {
         idx = i;
         break;
        }
      if(day_stats[i].Day == 0 && idx == -1)
         idx = i;
     }
   if(idx >= 0)
     {
      day_stats[idx].Day = today;
      day_stats[idx].Profit += profit;
      day_stats[idx].Trades++;
     }
  }

datetime DateOfDay(datetime t)
  {
   MqlDateTime tm;
   TimeToStruct(t, tm);
   tm.hour = 0; tm.min = 0; tm.sec = 0;
   return StructToTime(tm);
  }

//------------------------------ RESET ALL ----------------------------
void ResetAll()
  {
   InitGlobalVars();
   InitializeIndicators();
   dashboard_needs_update = true;
  }

//--------------------------------------------------------------------
//                Partie 4 : Dashboard PRO et gestion graphique
//--------------------------------------------------------------------
void UpdateDashboard()
  {
   DeleteDashboard();
   // Rectangle principal
   if(ObjectFind(0,"dashboard")<0)
     {
      ObjectCreate(0,"dashboard",OBJ_RECTANGLE_LABEL,0,0,0);
      ObjectSetInteger(0,"dashboard",OBJPROP_CORNER,CORNER_LEFT_UPPER);
      ObjectSetInteger(0,"dashboard",OBJPROP_XDISTANCE,DashboardPosX);
      ObjectSetInteger(0,"dashboard",OBJPROP_YDISTANCE,DashboardPosY);
      ObjectSetInteger(0,"dashboard",OBJPROP_WIDTH,DashboardWidth);
      ObjectSetInteger(0,"dashboard",OBJPROP_YSIZE,(long)DashboardHeight);
      ObjectSetInteger(0,"dashboard",OBJPROP_BGCOLOR,clrDarkSlateGray);
      ObjectSetInteger(0,"dashboard",OBJPROP_SELECTABLE,false);
      ObjectSetInteger(0,"dashboard",OBJPROP_SELECTED,false);
     }
   DrawDashboardHeader();
   DrawDashboardStats();
   DrawDashboardDaily();
   DrawDashboardButton();
   dashboard_needs_update = false;
  }

void DeleteDashboard()
  {
   ObjectDelete(0,"dashboard");
   ObjectDelete(0,"dashboard_header");
   ObjectDelete(0,"dashboard_stats");
   ObjectDelete(0,"dashboard_daily");
   ObjectDelete(0,"btn_fullclose");
  }

void DrawDashboardHeader()
  {
   string text = "DIAMOND PRO v20 | Symbol: "+symbol_main+" | "+(is_gold?"GOLD MODE":"FX MODE");
   if(ObjectFind(0,"dashboard_header")<0)
     {
      ObjectCreate(0,"dashboard_header",OBJ_LABEL,0,0,0);
      ObjectSetInteger(0,"dashboard_header",OBJPROP_CORNER,CORNER_LEFT_UPPER);
     }
   ObjectSetInteger(0,"dashboard_header",OBJPROP_XDISTANCE,DashboardPosX+10);
   ObjectSetInteger(0,"dashboard_header",OBJPROP_YDISTANCE,DashboardPosY+10);
   ObjectSetInteger(0,"dashboard_header",OBJPROP_FONTSIZE,12);
   ObjectSetInteger(0,"dashboard_header",OBJPROP_COLOR,clrGold);
   ObjectSetString(0,"dashboard_header",OBJPROP_TEXT,text);
  }

void DrawDashboardStats()
  {
   string text;
   double profit = AccountInfoDouble(ACCOUNT_PROFIT);
   double equity = AccountInfoDouble(ACCOUNT_EQUITY);
   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   int buys = CountOpenPositions(POSITION_TYPE_BUY);
   int sells = CountOpenPositions(POSITION_TYPE_SELL);
   text  = "Balance: "+DoubleToString(balance,2)+"\n";
   text += "Equity: "+DoubleToString(equity,2)+"\n";
   text += "Profit: "+DoubleToString(profit,2)+"\n";
   text += "Open Buys: "+IntegerToString(buys)+" | Open Sells: "+IntegerToString(sells)+"\n";
   text += "Lots: "+DoubleToString(calc_lot,2)+" | Risk%: "+DoubleToString(RiskPercent,2)+"\n";
   if(ObjectFind(0,"dashboard_stats")<0)
     {
      ObjectCreate(0,"dashboard_stats",OBJ_LABEL,0,0,0);
      ObjectSetInteger(0,"dashboard_stats",OBJPROP_CORNER,CORNER_LEFT_UPPER);
     }
   ObjectSetInteger(0,"dashboard_stats",OBJPROP_XDISTANCE,DashboardPosX+10);
   ObjectSetInteger(0,"dashboard_stats",OBJPROP_YDISTANCE,DashboardPosY+35);
   ObjectSetInteger(0,"dashboard_stats",OBJPROP_FONTSIZE,10);
   ObjectSetInteger(0,"dashboard_stats",OBJPROP_COLOR,clrWhite);
   ObjectSetString(0,"dashboard_stats",OBJPROP_TEXT,text);
  }

void DrawDashboardDaily()
  {
   string text="Day         P/L       Trades\n";
   for(int i=0; i<ArraySize(day_stats) && day_stats[i].Day>0; i++)
     {
      MqlDateTime tm;
      TimeToStruct(day_stats[i].Day,tm);
      string d = IntegerToString(tm.year,4)+"/"+IntegerToString(tm.mon,2)+"/"+IntegerToString(tm.day,2);
      text += d+"   "+DoubleToString(day_stats[i].Profit,2)+"     "+IntegerToString(day_stats[i].Trades)+"\n";
     }
   if(ObjectFind(0,"dashboard_daily")<0)
     {
      ObjectCreate(0,"dashboard_daily",OBJ_LABEL,0,0,0);
      ObjectSetInteger(0,"dashboard_daily",OBJPROP_CORNER,CORNER_LEFT_UPPER);
     }
   ObjectSetInteger(0,"dashboard_daily",OBJPROP_XDISTANCE,DashboardPosX+220);
   ObjectSetInteger(0,"dashboard_daily",OBJPROP_YDISTANCE,DashboardPosY+35);
   ObjectSetInteger(0,"dashboard_daily",OBJPROP_FONTSIZE,8);
   ObjectSetInteger(0,"dashboard_daily",OBJPROP_COLOR,clrAqua);
   ObjectSetString(0,"dashboard_daily",OBJPROP_TEXT,text);
  }

void DrawDashboardButton()
  {
   if(ObjectFind(0,"btn_fullclose")<0)
     {
      ObjectCreate(0,"btn_fullclose",OBJ_BUTTON,0,0,0);
      ObjectSetInteger(0,"btn_fullclose",OBJPROP_CORNER,CORNER_LEFT_UPPER);
     }
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_XDISTANCE,DashboardPosX+10);
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_YDISTANCE,DashboardPosY+DashboardHeight-40);
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_WIDTH,120);
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_YSIZE,(long)30);

   ObjectSetInteger(0,"btn_fullclose",OBJPROP_BGCOLOR,clrRed);
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_COLOR,clrWhite);
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_BORDER_TYPE,BORDER_RAISED);
   ObjectSetString(0,"btn_fullclose",OBJPROP_TEXT,"FULL CLOSE");
   ObjectSetInteger(0,"btn_fullclose",OBJPROP_FONTSIZE,12);
  }

//--------------------------------------------------------------------
//                Partie 5 : Initialisation des stratégies et système
//--------------------------------------------------------------------
void strategies_total_init()
  {
   ArrayResize(strategies,10);
   strategies_total = 0;
   strategies[0].Name = "SMA Crossover";
   strategies[0].Enabled = true;
   strategies_total++;
   strategies[1].Name = "Breakout";
   strategies[1].Enabled = true;
   strategies_total++;
   strategies[2].Name = "RSI";
   strategies[2].Enabled = true;
   strategies_total++;
   strategies[3].Name = "MACD";
   strategies[3].Enabled = true;
   strategies_total++;
   strategies[4].Name = "BBands";
   strategies[4].Enabled = true;
   strategies_total++;
  }

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   ResetAll();
   CheckGoldSymbol();
   InitializeIndicators();
   strategies_total_init();
   UpdateDashboard();
   EventSetTimer(60);
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   DeleteDashboard();
   EventKillTimer();
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   UpdateIndicators();
   ExecuteStrategies();
   PartialCloseManager();
   TrailingStopManager();
   if(full_close_triggered)
     {
      FullCloseAll();
      full_close_triggered = false;
     }
   if(dashboard_needs_update)
      UpdateDashboard();
  }

//+------------------------------------------------------------------+
//| Timer event                                                      |
//+------------------------------------------------------------------+
void OnTimer()
  {
   dashboard_needs_update = true;
  }

//+------------------------------------------------------------------+
//| Trade event                                                      |
//+------------------------------------------------------------------+
void OnTrade()
  {
   dashboard_needs_update = true;
  }

//+------------------------------------------------------------------+
//| Chart event                                                      |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
  {
   if(id == CHARTEVENT_OBJECT_CLICK)
     {
      string btn = sparam;
      if(btn == "btn_fullclose")
        {
         full_close_triggered = true;
        }
     }
  }

//+------------------------------------------------------------------+
//| Trade transaction event                                          |
//+------------------------------------------------------------------+
void OnTradeTransaction(
   const MqlTradeTransaction &trans,
   const MqlTradeRequest &request,
   const MqlTradeResult &result)
  {
   if(trans.type==TRADE_TRANSACTION_DEAL_ADD ||
      trans.type==TRADE_TRANSACTION_DEAL_UPDATE)
     {
      if(trans.deal_type == DEAL_TYPE_BUY || trans.deal_type == DEAL_TYPE_SELL)
        {
         
      if(HistoryDealSelect(trans.deal))
        {
         double deal_profit = HistoryDealGetDouble(trans.deal, DEAL_PROFIT);
         UpdateDailyStatsAfterTrade(deal_profit);
        }
    
         dashboard_needs_update = true;
        }
     }
  }

//+------------------------------------------------------------------+
//|      Copilot x amirbs14 - DIAMOND PRO v20 - Juin 2025            |
//+------------------------------------------------------------------+
